{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/ai/flows/recommend-creatives.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A flow that recommends creatives (designers/suppliers) for a specific demand.\n *\n * - recommendCreatives - A function that handles the creative recommendation process.\n * - RecommendCreativesInput - The input type for the recommendCreatives function.\n * - RecommendCreativesOutput - The return type for the recommendCreatives function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\n\nconst CreativeSchema = z.object({\n  id: z.string().describe('The unique identifier for the creative or supplier.'),\n  name: z.string().describe('The name of the creative or supplier.'),\n  type: z.enum(['creator', 'supplier']).describe('The type of the entity.'),\n  specialty: z.string().describe('A brief description of their specialty or expertise.'),\n});\n\nconst RecommendCreativesInputSchema = z.object({\n  demand: z.object({\n    title: z.string().describe('The title of the demand.'),\n    description: z.string().describe('A detailed description of the demand.'),\n    category: z.string().describe('The category of the demand.'),\n  }),\n  creatives: z.array(CreativeSchema).describe('A list of available creatives and suppliers to choose from.'),\n});\nexport type RecommendCreativesInput = z.infer<typeof RecommendCreativesInputSchema>;\n\nconst RecommendCreativesOutputSchema = z.object({\n  recommendations: z.array(\n    z.object({\n      id: z.string().describe('The ID of the recommended creative/supplier.'),\n      name: z.string().describe('The name of the recommended creative/supplier.'),\n      reason: z.string().describe('A concise reason why this creative/supplier is a good match for the demand.'),\n    })\n  ).describe('A list of 1-3 recommended creatives or suppliers.'),\n});\nexport type RecommendCreativesOutput = z.infer<typeof RecommendCreativesOutputSchema>;\n\n\nexport async function recommendCreatives(input: RecommendCreativesInput): Promise<RecommendCreativesOutput> {\n  return recommendCreativesFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'recommendCreativesPrompt',\n  input: { schema: RecommendCreativesInputSchema },\n  output: { schema: RecommendCreativesOutputSchema },\n  prompt: `You are an expert project manager and talent scout for a creative platform. Your task is to analyze a user's demand and recommend the most suitable creatives or suppliers from a provided list.\n\nAnalyze the following demand:\n- Title: {{{demand.title}}}\n- Category: {{{demand.category}}}\n- Description: {{{demand.description}}}\n\nHere is the list of available creatives and suppliers:\n{{#each creatives}}\n- ID: {{id}}, Name: {{name}}, Type: {{type}}, Specialty: {{specialty}}\n{{/each}}\n\nBased on the demand's requirements, please select 1 to 3 of the most appropriate candidates from the list. For each recommendation, provide a brief, insightful reason explaining why they are a good fit. Focus on matching their specialty with the demand's needs.\n\nYour output must be a valid JSON object that follows this schema precisely:\n${JSON.stringify(RecommendCreativesOutputSchema.shape)}`,\n});\n\nconst recommendCreativesFlow = ai.defineFlow(\n  {\n    name: 'recommendCreativesFlow',\n    inputSchema: RecommendCreativesInputSchema,\n    outputSchema: RecommendCreativesOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;;;;;;AAEA,MAAM,iBAAiB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,IAAI,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACxB,MAAM,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,MAAM,kKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAW,EAAE,QAAQ,CAAC;IAC/C,WAAW,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAEA,MAAM,gCAAgC,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,QAAQ,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACf,OAAO,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC,UAAU,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC;IACA,WAAW,kKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gBAAgB,QAAQ,CAAC;AAC9C;AAGA,MAAM,iCAAiC,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,iBAAiB,kKAAA,CAAA,IAAC,CAAC,KAAK,CACtB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,IAAI,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACxB,MAAM,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,QAAQ,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,IACA,QAAQ,CAAC;AACb;AAIO,eAAe,mBAAmB,KAA8B;IACrE,OAAO,uBAAuB;AAChC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAA8B;IAC/C,QAAQ;QAAE,QAAQ;IAA+B;IACjD,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,EAAE,KAAK,SAAS,CAAC,+BAA+B,KAAK,GAAG;AACxD;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/.next-internal/server/app/demand-pool/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {recommendCreatives as '403abca033b24e940d32f0d567ae8c14462620a60e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/app/demand-pool/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/demand-pool/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/demand-pool/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgS,GAC7T,8DACA","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/app/demand-pool/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/demand-pool/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/demand-pool/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4Q,GACzS,0CACA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}