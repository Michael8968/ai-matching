{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/ai/flows/product-recommendations.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview A product recommendation AI agent.\n *\n * - getProductRecommendations - A function that handles the product recommendation process.\n * - ProductRecommendationsInput - The input type for the getProductRecommendations function.\n * - ProductRecommendationsOutput - The return type for the getProductRecommendations function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport type { UserProfile } from './generate-user-profile';\n\nconst ProductRecommendationsInputSchema = z.object({\n  userProfile: z.object({\n    summary: z.string().describe('A summary of the user profile.'),\n    tags: z.array(z.string()).describe('A list of keywords or tags related to the user profile.'),\n  }).describe('The user profile generated by the AI.'),\n   photoDataUri: z.string().optional().describe(\"An optional photo of a product, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n});\nexport type ProductRecommendationsInput = z.infer<typeof ProductRecommendationsInputSchema>;\n\nconst ProductRecommendationsOutputSchema = z.object({\n  recommendations: z.array(\n    z.object({\n      name: z.string().describe('The name of the recommended product or service.'),\n      description: z.string().describe('A short description of the recommendation.'),\n      imageUrl: z.string().optional().describe('An optional URL to an image of the product or service. This should always be a placeholder from https://placehold.co.'),\n      link: z.string().optional().describe('An optional URL to the product or service page.'),\n    })\n  ).describe('An array of product or service recommendations.'),\n});\nexport type ProductRecommendationsOutput = z.infer<typeof ProductRecommendationsOutputSchema>;\n\nexport async function getProductRecommendations(input: ProductRecommendationsInput): Promise<ProductRecommendationsOutput> {\n  return productRecommendationsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'productRecommendationsPrompt',\n  input: {schema: ProductRecommendationsInputSchema},\n  output: {schema: ProductRecommendationsOutputSchema},\n  prompt: `You are a helpful shopping assistant. Based on the following user profile, please provide a list of product or service recommendations.\n\nUser Profile Summary: {{{userProfile.summary}}}\nUser Profile Tags: {{#each userProfile.tags}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}\n{{#if photoDataUri}}\nThe user also provided this image for reference: {{media url=photoDataUri}}\n{{/if}}\n\nPlease provide a list of 3-5 recommendations. For each recommendation, include a name, description, and an optional link. For the imageUrl, you MUST use a placeholder image from 'https://placehold.co/600x400.png'. Do not use any other domain.\n\nYour output should be a JSON object that follows this schema: ${JSON.stringify(ProductRecommendationsOutputSchema.shape)}`,\n});\n\nconst productRecommendationsFlow = ai.defineFlow(\n  {\n    name: 'productRecommendationsFlow',\n    inputSchema: ProductRecommendationsInputSchema,\n    outputSchema: ProductRecommendationsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC7B,MAAM,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACrC,GAAG,QAAQ,CAAC;IACX,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAChD;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACtB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;QACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACvC,IACA,QAAQ,CAAC;AACb;AAGO,eAAe,0BAA0B,KAAkC;IAChF,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC;;;;;;;;;;8DAUmD,EAAE,KAAK,SAAS,CAAC,mCAAmC,KAAK,GAAG;AAC1H;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/ai/flows/generate-user-profile.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview A user profiling AI agent.\n *\n * - generateUserProfile - A function that handles the user profiling process.\n * - UserProfileInput - The input type for the generateUserProfile function.\n * - UserProfileOutput - The return type for the generateUserProfile function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst UserProfileInputSchema = z.object({\n  description: z.string().describe('The description of the desired product or service.'),\n  photoDataUri: z.string().optional().describe(\"An optional photo of a product, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"),\n});\nexport type UserProfileInput = z.infer<typeof UserProfileInputSchema>;\n\nconst UserProfileOutputSchema = z.object({\n    summary: z.string().describe('A concise summary of the user profile based on their request.'),\n    tags: z.array(z.string()).describe('A list of 3-5 keywords or tags that represent the user\\'s needs and preferences.'),\n});\nexport type UserProfile = z.infer<typeof UserProfileOutputSchema>;\n\nexport async function generateUserProfile(input: UserProfileInput): Promise<UserProfile> {\n  return generateUserProfileFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'userProfilePrompt',\n  input: {schema: UserProfileInputSchema},\n  output: {schema: UserProfileOutputSchema},\n  prompt: `Analyze the following user request and generate a user profile.\n\nThe user is looking for a product or service. Based on their description and/or image, create a concise summary of their likely profile and distill their needs into 3-5 relevant keyword tags.\n\nDescription: {{{description}}}\n{{#if photoDataUri}}\nImage: {{media url=photoDataUri}}\n{{/if}}\n\nYour output should be a JSON object that follows this schema: ${JSON.stringify(UserProfileOutputSchema.shape)}`,\n});\n\nconst generateUserProfileFlow = ai.defineFlow(\n  {\n    name: 'generateUserProfileFlow',\n    inputSchema: UserProfileInputSchema,\n    outputSchema: UserProfileOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,MAAM,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACvC;AAGO,eAAe,oBAAoB,KAAuB;IAC/D,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAsB;IACtC,QAAQ;QAAC,QAAQ;IAAuB;IACxC,QAAQ,CAAC;;;;;;;;;8DASmD,EAAE,KAAK,SAAS,CAAC,wBAAwB,KAAK,GAAG;AAC/G;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getProductRecommendations as '40fb5ff97dec626f2382e0c7566f555e73932d0562'} from 'ACTIONS_MODULE0'\nexport {generateUserProfile as '4058aa0872bcf8bd04cb9f69406ce9428f8644cd23'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/components/features/shopping-assistant.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ShoppingAssistant = registerClientReference(\n    function() { throw new Error(\"Attempted to call ShoppingAssistant() from the server but ShoppingAssistant is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/features/shopping-assistant.tsx <module evaluation>\",\n    \"ShoppingAssistant\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,gFACA","debugId":null}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/components/features/shopping-assistant.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ShoppingAssistant = registerClientReference(\n    function() { throw new Error(\"Attempted to call ShoppingAssistant() from the server but ShoppingAssistant is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/features/shopping-assistant.tsx\",\n    \"ShoppingAssistant\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,oBAAoB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACnD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,4DACA","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///Users/michaelwong/Documents/GitHub/ai-matching/src/app/page.tsx"],"sourcesContent":["import { ShoppingAssistant } from '@/components/features/shopping-assistant';\n\nexport default function ShoppingAssistantPage() {\n  return (\n      <ShoppingAssistant />\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACI,8OAAC,uJAAA,CAAA,oBAAiB;;;;;AAExB","debugId":null}}]
}